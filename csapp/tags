!_TAG_EXTRA_DESCRIPTION	anonymous	/Include tags for non-named objects like lambda/
!_TAG_EXTRA_DESCRIPTION	fileScope	/Include tags of file scope/
!_TAG_EXTRA_DESCRIPTION	pseudo	/Include pseudo tags/
!_TAG_EXTRA_DESCRIPTION	subparser	/Include tags generated by subparsers/
!_TAG_FIELD_DESCRIPTION	epoch	/the last modified time of the input file (only for F\/file kind tag)/
!_TAG_FIELD_DESCRIPTION	file	/File-restricted scoping/
!_TAG_FIELD_DESCRIPTION	input	/input file/
!_TAG_FIELD_DESCRIPTION	name	/tag name/
!_TAG_FIELD_DESCRIPTION	pattern	/pattern/
!_TAG_FIELD_DESCRIPTION	typeref	/Type and name of a variable or typedef/
!_TAG_FIELD_DESCRIPTION!C++	name	/aliased names/
!_TAG_FILE_FORMAT	2	/extended format; --format=1 will not append ;" to lines/
!_TAG_FILE_SORTED	1	/0=unsorted, 1=sorted, 2=foldcase/
!_TAG_KIND_DESCRIPTION!C	d,macro	/macro definitions/
!_TAG_KIND_DESCRIPTION!C	e,enumerator	/enumerators (values inside an enumeration)/
!_TAG_KIND_DESCRIPTION!C	f,function	/function definitions/
!_TAG_KIND_DESCRIPTION!C	g,enum	/enumeration names/
!_TAG_KIND_DESCRIPTION!C	h,header	/included header files/
!_TAG_KIND_DESCRIPTION!C	m,member	/struct, and union members/
!_TAG_KIND_DESCRIPTION!C	s,struct	/structure names/
!_TAG_KIND_DESCRIPTION!C	t,typedef	/typedefs/
!_TAG_KIND_DESCRIPTION!C	u,union	/union names/
!_TAG_KIND_DESCRIPTION!C	v,variable	/variable definitions/
!_TAG_KIND_DESCRIPTION!C++	c,class	/classes/
!_TAG_KIND_DESCRIPTION!C++	d,macro	/macro definitions/
!_TAG_KIND_DESCRIPTION!C++	e,enumerator	/enumerators (values inside an enumeration)/
!_TAG_KIND_DESCRIPTION!C++	f,function	/function definitions/
!_TAG_KIND_DESCRIPTION!C++	g,enum	/enumeration names/
!_TAG_KIND_DESCRIPTION!C++	h,header	/included header files/
!_TAG_KIND_DESCRIPTION!C++	m,member	/class, struct, and union members/
!_TAG_KIND_DESCRIPTION!C++	n,namespace	/namespaces/
!_TAG_KIND_DESCRIPTION!C++	s,struct	/structure names/
!_TAG_KIND_DESCRIPTION!C++	t,typedef	/typedefs/
!_TAG_KIND_DESCRIPTION!C++	u,union	/union names/
!_TAG_KIND_DESCRIPTION!C++	v,variable	/variable definitions/
!_TAG_OUTPUT_EXCMD	mixed	/number, pattern, mixed, or combineV2/
!_TAG_OUTPUT_FILESEP	slash	/slash or backslash/
!_TAG_OUTPUT_MODE	u-ctags	/u-ctags or e-ctags/
!_TAG_OUTPUT_VERSION	0.0	/current.age/
!_TAG_PARSER_VERSION!C	0.0	/current.age/
!_TAG_PARSER_VERSION!C++	0.0	/current.age/
!_TAG_PATTERN_LENGTH_LIMIT	96	/0 for no limit/
!_TAG_PROC_CWD	/home/troubilll/utilities/csapp/	//
!_TAG_PROGRAM_AUTHOR	Universal Ctags Team	//
!_TAG_PROGRAM_NAME	Universal Ctags	/Derived from Exuberant Ctags/
!_TAG_PROGRAM_URL	https://ctags.io/	/official site/
!_TAG_PROGRAM_VERSION	6.0.0	/10399406/
!_TAG_ROLE_DESCRIPTION!C!header	local	/local header/
!_TAG_ROLE_DESCRIPTION!C!header	system	/system header/
!_TAG_ROLE_DESCRIPTION!C!macro	undef	/undefined/
!_TAG_ROLE_DESCRIPTION!C++!header	local	/local header/
!_TAG_ROLE_DESCRIPTION!C++!header	system	/system header/
!_TAG_ROLE_DESCRIPTION!C++!macro	undef	/undefined/
Accept	csapp.c	/^int Accept(int s, struct sockaddr *addr, socklen_t *addrlen) $/;"	f	typeref:typename:int
Alarm	csapp.c	/^unsigned int Alarm(unsigned int seconds) {$/;"	f	typeref:typename:unsigned int
Bind	csapp.c	/^void Bind(int sockfd, struct sockaddr *my_addr, int addrlen) $/;"	f	typeref:typename:void
Calloc	csapp.c	/^void *Calloc(size_t nmemb, size_t size) $/;"	f	typeref:typename:void *
Close	csapp.c	/^void Close(int fd) $/;"	f	typeref:typename:void
Connect	csapp.c	/^void Connect(int sockfd, struct sockaddr *serv_addr, int addrlen) $/;"	f	typeref:typename:void
DEF_MODE	csapp.h	/^#define DEF_MODE /;"	d
DEF_UMASK	csapp.h	/^#define DEF_UMASK /;"	d
Dup2	csapp.c	/^int Dup2(int fd1, int fd2) $/;"	f	typeref:typename:int
Execve	csapp.c	/^void Execve(const char *filename, char *const argv[], char *const envp[]) $/;"	f	typeref:typename:void
Fclose	csapp.c	/^void Fclose(FILE *fp) $/;"	f	typeref:typename:void
Fdopen	csapp.c	/^FILE *Fdopen(int fd, const char *type) $/;"	f	typeref:typename:FILE *
Fgets	csapp.c	/^char *Fgets(char *ptr, int n, FILE *stream) $/;"	f	typeref:typename:char *
Fopen	csapp.c	/^FILE *Fopen(const char *filename, const char *mode) $/;"	f	typeref:typename:FILE *
Fork	csapp.c	/^pid_t Fork(void) $/;"	f	typeref:typename:pid_t
Fputs	csapp.c	/^void Fputs(const char *ptr, FILE *stream) $/;"	f	typeref:typename:void
Fread	csapp.c	/^size_t Fread(void *ptr, size_t size, size_t nmemb, FILE *stream) $/;"	f	typeref:typename:size_t
Free	csapp.c	/^void Free(void *ptr) $/;"	f	typeref:typename:void
Fstat	csapp.c	/^void Fstat(int fd, struct stat *buf) $/;"	f	typeref:typename:void
Fwrite	csapp.c	/^void Fwrite(const void *ptr, size_t size, size_t nmemb, FILE *stream) $/;"	f	typeref:typename:void
Gethostbyaddr	csapp.c	/^struct hostent *Gethostbyaddr(const char *addr, int len, int type) $/;"	f	typeref:struct:hostent *
Gethostbyname	csapp.c	/^struct hostent *Gethostbyname(const char *name) $/;"	f	typeref:struct:hostent *
Getpgrp	csapp.c	/^pid_t Getpgrp(void) {$/;"	f	typeref:typename:pid_t
Kill	csapp.c	/^void Kill(pid_t pid, int signum) $/;"	f	typeref:typename:void
LISTENQ	csapp.h	/^#define LISTENQ /;"	d
Listen	csapp.c	/^void Listen(int s, int backlog) $/;"	f	typeref:typename:void
Lseek	csapp.c	/^off_t Lseek(int fildes, off_t offset, int whence) $/;"	f	typeref:typename:off_t
MAXBUF	csapp.h	/^#define MAXBUF /;"	d
MAXLINE	csapp.h	/^#define	MAXLINE	/;"	d
Malloc	csapp.c	/^void *Malloc(size_t size) $/;"	f	typeref:typename:void *
Mmap	csapp.c	/^void *Mmap(void *addr, size_t len, int prot, int flags, int fd, off_t offset) $/;"	f	typeref:typename:void *
Munmap	csapp.c	/^void Munmap(void *start, size_t length) $/;"	f	typeref:typename:void
Open	csapp.c	/^int Open(const char *pathname, int flags, mode_t mode) $/;"	f	typeref:typename:int
Open_clientfd	csapp.c	/^int Open_clientfd(char *hostname, int port) $/;"	f	typeref:typename:int
Open_listenfd	csapp.c	/^int Open_listenfd(int port) $/;"	f	typeref:typename:int
P	csapp.c	/^void P(sem_t *sem) $/;"	f	typeref:typename:void
Pause	csapp.c	/^void Pause() $/;"	f	typeref:typename:void
Pthread_cancel	csapp.c	/^void Pthread_cancel(pthread_t tid) {$/;"	f	typeref:typename:void
Pthread_create	csapp.c	/^void Pthread_create(pthread_t *tidp, pthread_attr_t *attrp, $/;"	f	typeref:typename:void
Pthread_detach	csapp.c	/^void Pthread_detach(pthread_t tid) {$/;"	f	typeref:typename:void
Pthread_exit	csapp.c	/^void Pthread_exit(void *retval) {$/;"	f	typeref:typename:void
Pthread_join	csapp.c	/^void Pthread_join(pthread_t tid, void **thread_return) {$/;"	f	typeref:typename:void
Pthread_once	csapp.c	/^void Pthread_once(pthread_once_t *once_control, void (*init_function)()) {$/;"	f	typeref:typename:void
Pthread_self	csapp.c	/^pthread_t Pthread_self(void) {$/;"	f	typeref:typename:pthread_t
RIO_BUFSIZE	csapp.h	/^#define RIO_BUFSIZE /;"	d
Read	csapp.c	/^ssize_t Read(int fd, void *buf, size_t count) $/;"	f	typeref:typename:ssize_t
Realloc	csapp.c	/^void *Realloc(void *ptr, size_t size) $/;"	f	typeref:typename:void *
Rio_readinitb	csapp.c	/^void Rio_readinitb(rio_t *rp, int fd)$/;"	f	typeref:typename:void
Rio_readlineb	csapp.c	/^ssize_t Rio_readlineb(rio_t *rp, void *usrbuf, size_t maxlen) $/;"	f	typeref:typename:ssize_t
Rio_readn	csapp.c	/^ssize_t Rio_readn(int fd, void *ptr, size_t nbytes) $/;"	f	typeref:typename:ssize_t
Rio_readnb	csapp.c	/^ssize_t Rio_readnb(rio_t *rp, void *usrbuf, size_t n) $/;"	f	typeref:typename:ssize_t
Rio_writen	csapp.c	/^void Rio_writen(int fd, void *usrbuf, size_t n) $/;"	f	typeref:typename:void
SA	csapp.h	/^typedef struct sockaddr SA;$/;"	t	typeref:struct:sockaddr
Select	csapp.c	/^int Select(int  n, fd_set *readfds, fd_set *writefds,$/;"	f	typeref:typename:int
Sem_init	csapp.c	/^void Sem_init(sem_t *sem, int pshared, unsigned int value) $/;"	f	typeref:typename:void
Setpgid	csapp.c	/^void Setpgid(pid_t pid, pid_t pgid) {$/;"	f	typeref:typename:void
Setsockopt	csapp.c	/^void Setsockopt(int s, int level, int optname, const void *optval, int optlen) $/;"	f	typeref:typename:void
Sigaddset	csapp.c	/^void Sigaddset(sigset_t *set, int signum)$/;"	f	typeref:typename:void
Sigdelset	csapp.c	/^void Sigdelset(sigset_t *set, int signum)$/;"	f	typeref:typename:void
Sigemptyset	csapp.c	/^void Sigemptyset(sigset_t *set)$/;"	f	typeref:typename:void
Sigfillset	csapp.c	/^void Sigfillset(sigset_t *set)$/;"	f	typeref:typename:void
Sigismember	csapp.c	/^int Sigismember(const sigset_t *set, int signum)$/;"	f	typeref:typename:int
Signal	csapp.c	/^handler_t *Signal(int signum, handler_t *handler) $/;"	f	typeref:typename:handler_t *
Sigprocmask	csapp.c	/^void Sigprocmask(int how, const sigset_t *set, sigset_t *oldset)$/;"	f	typeref:typename:void
Sleep	csapp.c	/^unsigned int Sleep(unsigned int secs) $/;"	f	typeref:typename:unsigned int
Socket	csapp.c	/^int Socket(int domain, int type, int protocol) $/;"	f	typeref:typename:int
Stat	csapp.c	/^void Stat(const char *filename, struct stat *buf) $/;"	f	typeref:typename:void
V	csapp.c	/^void V(sem_t *sem) $/;"	f	typeref:typename:void
Wait	csapp.c	/^pid_t Wait(int *status) $/;"	f	typeref:typename:pid_t
Waitpid	csapp.c	/^pid_t Waitpid(pid_t pid, int *iptr, int options) $/;"	f	typeref:typename:pid_t
Write	csapp.c	/^ssize_t Write(int fd, const void *buf, size_t count) $/;"	f	typeref:typename:ssize_t
__CSAPP_H__	csapp.h	/^#define __CSAPP_H__$/;"	d
__anondbe0f2720108	csapp.h	/^typedef struct {$/;"	s
app_error	csapp.c	/^void app_error(char *msg) \/* application error *\/$/;"	f	typeref:typename:void
dns_error	csapp.c	/^void dns_error(char *msg) \/* dns-style error *\/$/;"	f	typeref:typename:void
handler_t	csapp.h	/^typedef void handler_t(int);$/;"	t	typeref:typename:void ()(int)
open_clientfd	csapp.c	/^int open_clientfd(char *hostname, int port) $/;"	f	typeref:typename:int
open_listenfd	csapp.c	/^int open_listenfd(int port) $/;"	f	typeref:typename:int
posix_error	csapp.c	/^void posix_error(int code, char *msg) \/* posix-style error *\/$/;"	f	typeref:typename:void
rio_buf	csapp.h	/^    char rio_buf[RIO_BUFSIZE]; \/* internal buffer *\/$/;"	m	struct:__anondbe0f2720108	typeref:typename:char[]
rio_bufptr	csapp.h	/^    char *rio_bufptr;          \/* next unread byte in internal buf *\/$/;"	m	struct:__anondbe0f2720108	typeref:typename:char *
rio_cnt	csapp.h	/^    int rio_cnt;               \/* unread bytes in internal buf *\/$/;"	m	struct:__anondbe0f2720108	typeref:typename:int
rio_fd	csapp.h	/^    int rio_fd;                \/* descriptor for this internal buf *\/$/;"	m	struct:__anondbe0f2720108	typeref:typename:int
rio_read	csapp.c	/^static ssize_t rio_read(rio_t *rp, char *usrbuf, size_t n)$/;"	f	typeref:typename:ssize_t	file:
rio_readinitb	csapp.c	/^void rio_readinitb(rio_t *rp, int fd) $/;"	f	typeref:typename:void
rio_readlineb	csapp.c	/^ssize_t rio_readlineb(rio_t *rp, void *usrbuf, size_t maxlen) $/;"	f	typeref:typename:ssize_t
rio_readn	csapp.c	/^ssize_t rio_readn(int fd, void *usrbuf, size_t n) $/;"	f	typeref:typename:ssize_t
rio_readnb	csapp.c	/^ssize_t rio_readnb(rio_t *rp, void *usrbuf, size_t n) $/;"	f	typeref:typename:ssize_t
rio_t	csapp.h	/^} rio_t;$/;"	t	typeref:struct:__anondbe0f2720108
rio_writen	csapp.c	/^ssize_t rio_writen(int fd, void *usrbuf, size_t n) $/;"	f	typeref:typename:ssize_t
unix_error	csapp.c	/^void unix_error(char *msg) \/* unix-style error *\/$/;"	f	typeref:typename:void
